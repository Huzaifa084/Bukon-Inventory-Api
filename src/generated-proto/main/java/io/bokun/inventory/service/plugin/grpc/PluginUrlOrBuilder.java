// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plugin_service.proto

package io.bokun.inventory.service.plugin.grpc;

public interface PluginUrlOrBuilder extends
    // @@protoc_insertion_point(interface_extends:io.bokun.inventory.service.plugin.grpc.PluginUrl)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   * URL of plugin which is listening on a socket. Mandatory.
   * </pre>
   *
   * <code>string url = 1;</code>
   * @return The url.
   */
  java.lang.String getUrl();
  /**
   * <pre>
   * URL of plugin which is listening on a socket. Mandatory.
   * </pre>
   *
   * <code>string url = 1;</code>
   * @return The bytes for url.
   */
  com.google.protobuf.ByteString
      getUrlBytes();

  /**
   * <pre>
   * Whether this plugin supports TLS/SSL. Mandatory.
   * </pre>
   *
   * <code>bool tls = 2;</code>
   * @return The tls.
   */
  boolean getTls();

  /**
   * <pre>
   * SSL certificate file, only used if tls=true.
   * </pre>
   *
   * <code>string cert = 3;</code>
   * @return The cert.
   */
  java.lang.String getCert();
  /**
   * <pre>
   * SSL certificate file, only used if tls=true.
   * </pre>
   *
   * <code>string cert = 3;</code>
   * @return The bytes for cert.
   */
  com.google.protobuf.ByteString
      getCertBytes();

  /**
   * <pre>
   * In case if there is a secret shared between server and client (regardless of TLS usage). Applicable for transport=GRPC only. Optional
   * </pre>
   *
   * <code>string sharedSecret = 4;</code>
   * @return The sharedSecret.
   */
  java.lang.String getSharedSecret();
  /**
   * <pre>
   * In case if there is a secret shared between server and client (regardless of TLS usage). Applicable for transport=GRPC only. Optional
   * </pre>
   *
   * <code>string sharedSecret = 4;</code>
   * @return The bytes for sharedSecret.
   */
  com.google.protobuf.ByteString
      getSharedSecretBytes();

  /**
   * <pre>
   * Type of transport protocol this plugin requires. Optional, defaults to GRPC if unset.
   * </pre>
   *
   * <code>.io.bokun.inventory.service.plugin.grpc.PluginTransport transport = 5;</code>
   * @return The enum numeric value on the wire for transport.
   */
  int getTransportValue();
  /**
   * <pre>
   * Type of transport protocol this plugin requires. Optional, defaults to GRPC if unset.
   * </pre>
   *
   * <code>.io.bokun.inventory.service.plugin.grpc.PluginTransport transport = 5;</code>
   * @return The transport.
   */
  io.bokun.inventory.service.plugin.grpc.PluginTransport getTransport();

  /**
   * <pre>
   * Username for basic authentication to use for every request. Applicable for transport=REST only. Optional.
   * </pre>
   *
   * <code>.google.protobuf.StringValue basicAuthUsername = 6;</code>
   * @return Whether the basicAuthUsername field is set.
   */
  boolean hasBasicAuthUsername();
  /**
   * <pre>
   * Username for basic authentication to use for every request. Applicable for transport=REST only. Optional.
   * </pre>
   *
   * <code>.google.protobuf.StringValue basicAuthUsername = 6;</code>
   * @return The basicAuthUsername.
   */
  com.google.protobuf.StringValue getBasicAuthUsername();

  /**
   * <pre>
   * Password for basic authentication to use for every request. Applicable for transport=REST only. Optional.
   * </pre>
   *
   * <code>.google.protobuf.StringValue basicAuthPassword = 7;</code>
   * @return Whether the basicAuthPassword field is set.
   */
  boolean hasBasicAuthPassword();
  /**
   * <pre>
   * Password for basic authentication to use for every request. Applicable for transport=REST only. Optional.
   * </pre>
   *
   * <code>.google.protobuf.StringValue basicAuthPassword = 7;</code>
   * @return The basicAuthPassword.
   */
  com.google.protobuf.StringValue getBasicAuthPassword();
}
