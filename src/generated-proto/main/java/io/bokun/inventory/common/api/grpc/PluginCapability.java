// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

package io.bokun.inventory.common.api.grpc;

/**
 * <pre>
 * What kind of features/speacial cases does this plugin support?
 * </pre>
 *
 * Protobuf enum {@code io.bokun.inventory.common.api.grpc.PluginCapability}
 */
public enum PluginCapability
    implements com.google.protobuf.Internal.EnumLite {
  /**
   * <code>UNASSIGNED_PLUGIN_CAPABILITY = 0;</code>
   */
  UNASSIGNED_PLUGIN_CAPABILITY(0),
  /**
   * <pre>
   * Currently unused.
   * </pre>
   *
   * <code>SUPPORTS_PRICING = 1;</code>
   */
  SUPPORTS_PRICING(1),
  /**
   * <pre>
   * If set, both platform and Inventory Service with make two calls (CreateReservation + ConfirmBooking) - which is the recommended way.
   * Otherwise, one step CreateAndConfirmBooking method will be used.
   * For a plugin, it doesn't make sense to implement both options as only one will be used, depending of presence/absence of this flag.
   * </pre>
   *
   * <code>SUPPORTS_RESERVATIONS = 2;</code>
   */
  SUPPORTS_RESERVATIONS(2),
  /**
   * <pre>
   * If enabled, it means that a plugin is able (and required) to respond to availability requests coming from Bokun.
   * Otherwise it is assumed that availability is managed in Bokun silo and no availability query is sent towards plugin. However if a booking is
   * made, the call is still made towards plugin.
   * </pre>
   *
   * <code>SUPPORTS_AVAILABILITY = 3;</code>
   */
  SUPPORTS_AVAILABILITY(3),
  /**
   * <pre>
   * If enabled, it means that a plugin is able (and required) to respond to cancelReservation requests coming from Bokun.
   * This option can only be enabled if SUPPORTS_RESERVATIONS is enabled (requests to cancelReservation will only be sent if both flags are present).
   * It is otherwise assumed that the external system is expiring reservations automatically after certain time period.
   * </pre>
   *
   * <code>SUPPORTS_RESERVATION_CANCELLATION = 4;</code>
   */
  SUPPORTS_RESERVATION_CANCELLATION(4),
  /**
   * <pre>
   * If enabled, it means that a plugin is able (and required) to respond to amendBooking requests coming from Bokun.
   * </pre>
   *
   * <code>SUPPORTS_AMENDMENT = 5;</code>
   */
  SUPPORTS_AMENDMENT(5),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>UNASSIGNED_PLUGIN_CAPABILITY = 0;</code>
   */
  public static final int UNASSIGNED_PLUGIN_CAPABILITY_VALUE = 0;
  /**
   * <pre>
   * Currently unused.
   * </pre>
   *
   * <code>SUPPORTS_PRICING = 1;</code>
   */
  public static final int SUPPORTS_PRICING_VALUE = 1;
  /**
   * <pre>
   * If set, both platform and Inventory Service with make two calls (CreateReservation + ConfirmBooking) - which is the recommended way.
   * Otherwise, one step CreateAndConfirmBooking method will be used.
   * For a plugin, it doesn't make sense to implement both options as only one will be used, depending of presence/absence of this flag.
   * </pre>
   *
   * <code>SUPPORTS_RESERVATIONS = 2;</code>
   */
  public static final int SUPPORTS_RESERVATIONS_VALUE = 2;
  /**
   * <pre>
   * If enabled, it means that a plugin is able (and required) to respond to availability requests coming from Bokun.
   * Otherwise it is assumed that availability is managed in Bokun silo and no availability query is sent towards plugin. However if a booking is
   * made, the call is still made towards plugin.
   * </pre>
   *
   * <code>SUPPORTS_AVAILABILITY = 3;</code>
   */
  public static final int SUPPORTS_AVAILABILITY_VALUE = 3;
  /**
   * <pre>
   * If enabled, it means that a plugin is able (and required) to respond to cancelReservation requests coming from Bokun.
   * This option can only be enabled if SUPPORTS_RESERVATIONS is enabled (requests to cancelReservation will only be sent if both flags are present).
   * It is otherwise assumed that the external system is expiring reservations automatically after certain time period.
   * </pre>
   *
   * <code>SUPPORTS_RESERVATION_CANCELLATION = 4;</code>
   */
  public static final int SUPPORTS_RESERVATION_CANCELLATION_VALUE = 4;
  /**
   * <pre>
   * If enabled, it means that a plugin is able (and required) to respond to amendBooking requests coming from Bokun.
   * </pre>
   *
   * <code>SUPPORTS_AMENDMENT = 5;</code>
   */
  public static final int SUPPORTS_AMENDMENT_VALUE = 5;


  @java.lang.Override
  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The number of the enum to look for.
   * @return The enum associated with the given number.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static PluginCapability valueOf(int value) {
    return forNumber(value);
  }

  public static PluginCapability forNumber(int value) {
    switch (value) {
      case 0: return UNASSIGNED_PLUGIN_CAPABILITY;
      case 1: return SUPPORTS_PRICING;
      case 2: return SUPPORTS_RESERVATIONS;
      case 3: return SUPPORTS_AVAILABILITY;
      case 4: return SUPPORTS_RESERVATION_CANCELLATION;
      case 5: return SUPPORTS_AMENDMENT;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<PluginCapability>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      PluginCapability> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<PluginCapability>() {
          @java.lang.Override
          public PluginCapability findValueByNumber(int number) {
            return PluginCapability.forNumber(number);
          }
        };

  public static com.google.protobuf.Internal.EnumVerifier 
      internalGetVerifier() {
    return PluginCapabilityVerifier.INSTANCE;
  }

  private static final class PluginCapabilityVerifier implements 
       com.google.protobuf.Internal.EnumVerifier { 
          static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new PluginCapabilityVerifier();
          @java.lang.Override
          public boolean isInRange(int number) {
            return PluginCapability.forNumber(number) != null;
          }
        };

  private final int value;

  private PluginCapability(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:io.bokun.inventory.common.api.grpc.PluginCapability)
}

