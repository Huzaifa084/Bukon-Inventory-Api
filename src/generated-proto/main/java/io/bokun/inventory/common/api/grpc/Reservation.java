// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

package io.bokun.inventory.common.api.grpc;

/**
 * Protobuf type {@code io.bokun.inventory.common.api.grpc.Reservation}
 */
public  final class Reservation extends
    com.google.protobuf.GeneratedMessageLite<
        Reservation, Reservation.Builder> implements
    // @@protoc_insertion_point(message_implements:io.bokun.inventory.common.api.grpc.Reservation)
    ReservationOrBuilder {
  private Reservation() {
    rateId_ = "";
    passengers_ = emptyProtobufList();
    extraBooking_ = emptyProtobufList();
  }
  public static final int RATEID_FIELD_NUMBER = 1;
  private java.lang.String rateId_;
  /**
   * <pre>
   * At what rate ("12 hour rate", "24 hour rate" etc.) this is booked. Refers to a rate in Bokun. Mandatory.
   * Should match rate from, ProductDescription::rates of booked product.
   * </pre>
   *
   * <code>string rateId = 1;</code>
   * @return The rateId.
   */
  @java.lang.Override
  public java.lang.String getRateId() {
    return rateId_;
  }
  /**
   * <pre>
   * At what rate ("12 hour rate", "24 hour rate" etc.) this is booked. Refers to a rate in Bokun. Mandatory.
   * Should match rate from, ProductDescription::rates of booked product.
   * </pre>
   *
   * <code>string rateId = 1;</code>
   * @return The bytes for rateId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getRateIdBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(rateId_);
  }
  /**
   * <pre>
   * At what rate ("12 hour rate", "24 hour rate" etc.) this is booked. Refers to a rate in Bokun. Mandatory.
   * Should match rate from, ProductDescription::rates of booked product.
   * </pre>
   *
   * <code>string rateId = 1;</code>
   * @param value The rateId to set.
   */
  private void setRateId(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    rateId_ = value;
  }
  /**
   * <pre>
   * At what rate ("12 hour rate", "24 hour rate" etc.) this is booked. Refers to a rate in Bokun. Mandatory.
   * Should match rate from, ProductDescription::rates of booked product.
   * </pre>
   *
   * <code>string rateId = 1;</code>
   */
  private void clearRateId() {
    
    rateId_ = getDefaultInstance().getRateId();
  }
  /**
   * <pre>
   * At what rate ("12 hour rate", "24 hour rate" etc.) this is booked. Refers to a rate in Bokun. Mandatory.
   * Should match rate from, ProductDescription::rates of booked product.
   * </pre>
   *
   * <code>string rateId = 1;</code>
   * @param value The bytes for rateId to set.
   */
  private void setRateIdBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    rateId_ = value.toStringUtf8();
    
  }

  public static final int PASSENGERS_FIELD_NUMBER = 2;
  private com.google.protobuf.Internal.ProtobufList<io.bokun.inventory.common.api.grpc.Passenger> passengers_;
  /**
   * <pre>
   * Who will travel on this reservation? Mandatory for both price-per-person and price-per-booking cases.
   * If purchasing for price-per-booking (e.g. 2 ADT + 3 CHD family ticket), Passenger should be repeated in order to list all pricing categories
   * booking this (2 ADT + 3 CHD) even though this is one family.
   * If purchasing for price-per-person (e.g. 1 ADT + 1 CHD), Passenger should be repeated for each pricing category too, but with different
   * attributes set (see Passenger type for more information)
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.Passenger passengers = 2;</code>
   */
  @java.lang.Override
  public java.util.List<io.bokun.inventory.common.api.grpc.Passenger> getPassengersList() {
    return passengers_;
  }
  /**
   * <pre>
   * Who will travel on this reservation? Mandatory for both price-per-person and price-per-booking cases.
   * If purchasing for price-per-booking (e.g. 2 ADT + 3 CHD family ticket), Passenger should be repeated in order to list all pricing categories
   * booking this (2 ADT + 3 CHD) even though this is one family.
   * If purchasing for price-per-person (e.g. 1 ADT + 1 CHD), Passenger should be repeated for each pricing category too, but with different
   * attributes set (see Passenger type for more information)
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.Passenger passengers = 2;</code>
   */
  public java.util.List<? extends io.bokun.inventory.common.api.grpc.PassengerOrBuilder> 
      getPassengersOrBuilderList() {
    return passengers_;
  }
  /**
   * <pre>
   * Who will travel on this reservation? Mandatory for both price-per-person and price-per-booking cases.
   * If purchasing for price-per-booking (e.g. 2 ADT + 3 CHD family ticket), Passenger should be repeated in order to list all pricing categories
   * booking this (2 ADT + 3 CHD) even though this is one family.
   * If purchasing for price-per-person (e.g. 1 ADT + 1 CHD), Passenger should be repeated for each pricing category too, but with different
   * attributes set (see Passenger type for more information)
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.Passenger passengers = 2;</code>
   */
  @java.lang.Override
  public int getPassengersCount() {
    return passengers_.size();
  }
  /**
   * <pre>
   * Who will travel on this reservation? Mandatory for both price-per-person and price-per-booking cases.
   * If purchasing for price-per-booking (e.g. 2 ADT + 3 CHD family ticket), Passenger should be repeated in order to list all pricing categories
   * booking this (2 ADT + 3 CHD) even though this is one family.
   * If purchasing for price-per-person (e.g. 1 ADT + 1 CHD), Passenger should be repeated for each pricing category too, but with different
   * attributes set (see Passenger type for more information)
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.Passenger passengers = 2;</code>
   */
  @java.lang.Override
  public io.bokun.inventory.common.api.grpc.Passenger getPassengers(int index) {
    return passengers_.get(index);
  }
  /**
   * <pre>
   * Who will travel on this reservation? Mandatory for both price-per-person and price-per-booking cases.
   * If purchasing for price-per-booking (e.g. 2 ADT + 3 CHD family ticket), Passenger should be repeated in order to list all pricing categories
   * booking this (2 ADT + 3 CHD) even though this is one family.
   * If purchasing for price-per-person (e.g. 1 ADT + 1 CHD), Passenger should be repeated for each pricing category too, but with different
   * attributes set (see Passenger type for more information)
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.Passenger passengers = 2;</code>
   */
  public io.bokun.inventory.common.api.grpc.PassengerOrBuilder getPassengersOrBuilder(
      int index) {
    return passengers_.get(index);
  }
  private void ensurePassengersIsMutable() {
    com.google.protobuf.Internal.ProtobufList<io.bokun.inventory.common.api.grpc.Passenger> tmp = passengers_;
    if (!tmp.isModifiable()) {
      passengers_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }

  /**
   * <pre>
   * Who will travel on this reservation? Mandatory for both price-per-person and price-per-booking cases.
   * If purchasing for price-per-booking (e.g. 2 ADT + 3 CHD family ticket), Passenger should be repeated in order to list all pricing categories
   * booking this (2 ADT + 3 CHD) even though this is one family.
   * If purchasing for price-per-person (e.g. 1 ADT + 1 CHD), Passenger should be repeated for each pricing category too, but with different
   * attributes set (see Passenger type for more information)
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.Passenger passengers = 2;</code>
   */
  private void setPassengers(
      int index, io.bokun.inventory.common.api.grpc.Passenger value) {
    value.getClass();
  ensurePassengersIsMutable();
    passengers_.set(index, value);
  }
  /**
   * <pre>
   * Who will travel on this reservation? Mandatory for both price-per-person and price-per-booking cases.
   * If purchasing for price-per-booking (e.g. 2 ADT + 3 CHD family ticket), Passenger should be repeated in order to list all pricing categories
   * booking this (2 ADT + 3 CHD) even though this is one family.
   * If purchasing for price-per-person (e.g. 1 ADT + 1 CHD), Passenger should be repeated for each pricing category too, but with different
   * attributes set (see Passenger type for more information)
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.Passenger passengers = 2;</code>
   */
  private void addPassengers(io.bokun.inventory.common.api.grpc.Passenger value) {
    value.getClass();
  ensurePassengersIsMutable();
    passengers_.add(value);
  }
  /**
   * <pre>
   * Who will travel on this reservation? Mandatory for both price-per-person and price-per-booking cases.
   * If purchasing for price-per-booking (e.g. 2 ADT + 3 CHD family ticket), Passenger should be repeated in order to list all pricing categories
   * booking this (2 ADT + 3 CHD) even though this is one family.
   * If purchasing for price-per-person (e.g. 1 ADT + 1 CHD), Passenger should be repeated for each pricing category too, but with different
   * attributes set (see Passenger type for more information)
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.Passenger passengers = 2;</code>
   */
  private void addPassengers(
      int index, io.bokun.inventory.common.api.grpc.Passenger value) {
    value.getClass();
  ensurePassengersIsMutable();
    passengers_.add(index, value);
  }
  /**
   * <pre>
   * Who will travel on this reservation? Mandatory for both price-per-person and price-per-booking cases.
   * If purchasing for price-per-booking (e.g. 2 ADT + 3 CHD family ticket), Passenger should be repeated in order to list all pricing categories
   * booking this (2 ADT + 3 CHD) even though this is one family.
   * If purchasing for price-per-person (e.g. 1 ADT + 1 CHD), Passenger should be repeated for each pricing category too, but with different
   * attributes set (see Passenger type for more information)
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.Passenger passengers = 2;</code>
   */
  private void addAllPassengers(
      java.lang.Iterable<? extends io.bokun.inventory.common.api.grpc.Passenger> values) {
    ensurePassengersIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, passengers_);
  }
  /**
   * <pre>
   * Who will travel on this reservation? Mandatory for both price-per-person and price-per-booking cases.
   * If purchasing for price-per-booking (e.g. 2 ADT + 3 CHD family ticket), Passenger should be repeated in order to list all pricing categories
   * booking this (2 ADT + 3 CHD) even though this is one family.
   * If purchasing for price-per-person (e.g. 1 ADT + 1 CHD), Passenger should be repeated for each pricing category too, but with different
   * attributes set (see Passenger type for more information)
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.Passenger passengers = 2;</code>
   */
  private void clearPassengers() {
    passengers_ = emptyProtobufList();
  }
  /**
   * <pre>
   * Who will travel on this reservation? Mandatory for both price-per-person and price-per-booking cases.
   * If purchasing for price-per-booking (e.g. 2 ADT + 3 CHD family ticket), Passenger should be repeated in order to list all pricing categories
   * booking this (2 ADT + 3 CHD) even though this is one family.
   * If purchasing for price-per-person (e.g. 1 ADT + 1 CHD), Passenger should be repeated for each pricing category too, but with different
   * attributes set (see Passenger type for more information)
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.Passenger passengers = 2;</code>
   */
  private void removePassengers(int index) {
    ensurePassengersIsMutable();
    passengers_.remove(index);
  }

  public static final int PRICEPERBOOKING_FIELD_NUMBER = 3;
  private io.bokun.inventory.common.api.grpc.Price pricePerBooking_;
  /**
   * <pre>
   * How much has been paid for this, in case this was priced per booking.
   * If this was priced per person, this field should be left unassigned.
   * </pre>
   *
   * <code>.io.bokun.inventory.common.api.grpc.Price pricePerBooking = 3;</code>
   */
  @java.lang.Override
  public boolean hasPricePerBooking() {
    return pricePerBooking_ != null;
  }
  /**
   * <pre>
   * How much has been paid for this, in case this was priced per booking.
   * If this was priced per person, this field should be left unassigned.
   * </pre>
   *
   * <code>.io.bokun.inventory.common.api.grpc.Price pricePerBooking = 3;</code>
   */
  @java.lang.Override
  public io.bokun.inventory.common.api.grpc.Price getPricePerBooking() {
    return pricePerBooking_ == null ? io.bokun.inventory.common.api.grpc.Price.getDefaultInstance() : pricePerBooking_;
  }
  /**
   * <pre>
   * How much has been paid for this, in case this was priced per booking.
   * If this was priced per person, this field should be left unassigned.
   * </pre>
   *
   * <code>.io.bokun.inventory.common.api.grpc.Price pricePerBooking = 3;</code>
   */
  private void setPricePerBooking(io.bokun.inventory.common.api.grpc.Price value) {
    value.getClass();
  pricePerBooking_ = value;
    
    }
  /**
   * <pre>
   * How much has been paid for this, in case this was priced per booking.
   * If this was priced per person, this field should be left unassigned.
   * </pre>
   *
   * <code>.io.bokun.inventory.common.api.grpc.Price pricePerBooking = 3;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergePricePerBooking(io.bokun.inventory.common.api.grpc.Price value) {
    value.getClass();
  if (pricePerBooking_ != null &&
        pricePerBooking_ != io.bokun.inventory.common.api.grpc.Price.getDefaultInstance()) {
      pricePerBooking_ =
        io.bokun.inventory.common.api.grpc.Price.newBuilder(pricePerBooking_).mergeFrom(value).buildPartial();
    } else {
      pricePerBooking_ = value;
    }
    
  }
  /**
   * <pre>
   * How much has been paid for this, in case this was priced per booking.
   * If this was priced per person, this field should be left unassigned.
   * </pre>
   *
   * <code>.io.bokun.inventory.common.api.grpc.Price pricePerBooking = 3;</code>
   */
  private void clearPricePerBooking() {  pricePerBooking_ = null;
    
  }

  public static final int EXTRABOOKING_FIELD_NUMBER = 4;
  private com.google.protobuf.Internal.ProtobufList<io.bokun.inventory.common.api.grpc.ExtraBooking> extraBooking_;
  /**
   * <pre>
   * Deprecated. Do not use. Refer to Passengers section which has extraBookings instead.
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBooking = 4;</code>
   */
  @java.lang.Override
  public java.util.List<io.bokun.inventory.common.api.grpc.ExtraBooking> getExtraBookingList() {
    return extraBooking_;
  }
  /**
   * <pre>
   * Deprecated. Do not use. Refer to Passengers section which has extraBookings instead.
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBooking = 4;</code>
   */
  public java.util.List<? extends io.bokun.inventory.common.api.grpc.ExtraBookingOrBuilder> 
      getExtraBookingOrBuilderList() {
    return extraBooking_;
  }
  /**
   * <pre>
   * Deprecated. Do not use. Refer to Passengers section which has extraBookings instead.
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBooking = 4;</code>
   */
  @java.lang.Override
  public int getExtraBookingCount() {
    return extraBooking_.size();
  }
  /**
   * <pre>
   * Deprecated. Do not use. Refer to Passengers section which has extraBookings instead.
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBooking = 4;</code>
   */
  @java.lang.Override
  public io.bokun.inventory.common.api.grpc.ExtraBooking getExtraBooking(int index) {
    return extraBooking_.get(index);
  }
  /**
   * <pre>
   * Deprecated. Do not use. Refer to Passengers section which has extraBookings instead.
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBooking = 4;</code>
   */
  public io.bokun.inventory.common.api.grpc.ExtraBookingOrBuilder getExtraBookingOrBuilder(
      int index) {
    return extraBooking_.get(index);
  }
  private void ensureExtraBookingIsMutable() {
    com.google.protobuf.Internal.ProtobufList<io.bokun.inventory.common.api.grpc.ExtraBooking> tmp = extraBooking_;
    if (!tmp.isModifiable()) {
      extraBooking_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }

  /**
   * <pre>
   * Deprecated. Do not use. Refer to Passengers section which has extraBookings instead.
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBooking = 4;</code>
   */
  private void setExtraBooking(
      int index, io.bokun.inventory.common.api.grpc.ExtraBooking value) {
    value.getClass();
  ensureExtraBookingIsMutable();
    extraBooking_.set(index, value);
  }
  /**
   * <pre>
   * Deprecated. Do not use. Refer to Passengers section which has extraBookings instead.
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBooking = 4;</code>
   */
  private void addExtraBooking(io.bokun.inventory.common.api.grpc.ExtraBooking value) {
    value.getClass();
  ensureExtraBookingIsMutable();
    extraBooking_.add(value);
  }
  /**
   * <pre>
   * Deprecated. Do not use. Refer to Passengers section which has extraBookings instead.
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBooking = 4;</code>
   */
  private void addExtraBooking(
      int index, io.bokun.inventory.common.api.grpc.ExtraBooking value) {
    value.getClass();
  ensureExtraBookingIsMutable();
    extraBooking_.add(index, value);
  }
  /**
   * <pre>
   * Deprecated. Do not use. Refer to Passengers section which has extraBookings instead.
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBooking = 4;</code>
   */
  private void addAllExtraBooking(
      java.lang.Iterable<? extends io.bokun.inventory.common.api.grpc.ExtraBooking> values) {
    ensureExtraBookingIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, extraBooking_);
  }
  /**
   * <pre>
   * Deprecated. Do not use. Refer to Passengers section which has extraBookings instead.
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBooking = 4;</code>
   */
  private void clearExtraBooking() {
    extraBooking_ = emptyProtobufList();
  }
  /**
   * <pre>
   * Deprecated. Do not use. Refer to Passengers section which has extraBookings instead.
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBooking = 4;</code>
   */
  private void removeExtraBooking(int index) {
    ensureExtraBookingIsMutable();
    extraBooking_.remove(index);
  }

  public static io.bokun.inventory.common.api.grpc.Reservation parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static io.bokun.inventory.common.api.grpc.Reservation parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static io.bokun.inventory.common.api.grpc.Reservation parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static io.bokun.inventory.common.api.grpc.Reservation parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static io.bokun.inventory.common.api.grpc.Reservation parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static io.bokun.inventory.common.api.grpc.Reservation parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static io.bokun.inventory.common.api.grpc.Reservation parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static io.bokun.inventory.common.api.grpc.Reservation parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static io.bokun.inventory.common.api.grpc.Reservation parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static io.bokun.inventory.common.api.grpc.Reservation parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static io.bokun.inventory.common.api.grpc.Reservation parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static io.bokun.inventory.common.api.grpc.Reservation parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(io.bokun.inventory.common.api.grpc.Reservation prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code io.bokun.inventory.common.api.grpc.Reservation}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        io.bokun.inventory.common.api.grpc.Reservation, Builder> implements
      // @@protoc_insertion_point(builder_implements:io.bokun.inventory.common.api.grpc.Reservation)
      io.bokun.inventory.common.api.grpc.ReservationOrBuilder {
    // Construct using io.bokun.inventory.common.api.grpc.Reservation.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * At what rate ("12 hour rate", "24 hour rate" etc.) this is booked. Refers to a rate in Bokun. Mandatory.
     * Should match rate from, ProductDescription::rates of booked product.
     * </pre>
     *
     * <code>string rateId = 1;</code>
     * @return The rateId.
     */
    @java.lang.Override
    public java.lang.String getRateId() {
      return instance.getRateId();
    }
    /**
     * <pre>
     * At what rate ("12 hour rate", "24 hour rate" etc.) this is booked. Refers to a rate in Bokun. Mandatory.
     * Should match rate from, ProductDescription::rates of booked product.
     * </pre>
     *
     * <code>string rateId = 1;</code>
     * @return The bytes for rateId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getRateIdBytes() {
      return instance.getRateIdBytes();
    }
    /**
     * <pre>
     * At what rate ("12 hour rate", "24 hour rate" etc.) this is booked. Refers to a rate in Bokun. Mandatory.
     * Should match rate from, ProductDescription::rates of booked product.
     * </pre>
     *
     * <code>string rateId = 1;</code>
     * @param value The rateId to set.
     * @return This builder for chaining.
     */
    public Builder setRateId(
        java.lang.String value) {
      copyOnWrite();
      instance.setRateId(value);
      return this;
    }
    /**
     * <pre>
     * At what rate ("12 hour rate", "24 hour rate" etc.) this is booked. Refers to a rate in Bokun. Mandatory.
     * Should match rate from, ProductDescription::rates of booked product.
     * </pre>
     *
     * <code>string rateId = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearRateId() {
      copyOnWrite();
      instance.clearRateId();
      return this;
    }
    /**
     * <pre>
     * At what rate ("12 hour rate", "24 hour rate" etc.) this is booked. Refers to a rate in Bokun. Mandatory.
     * Should match rate from, ProductDescription::rates of booked product.
     * </pre>
     *
     * <code>string rateId = 1;</code>
     * @param value The bytes for rateId to set.
     * @return This builder for chaining.
     */
    public Builder setRateIdBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setRateIdBytes(value);
      return this;
    }

    /**
     * <pre>
     * Who will travel on this reservation? Mandatory for both price-per-person and price-per-booking cases.
     * If purchasing for price-per-booking (e.g. 2 ADT + 3 CHD family ticket), Passenger should be repeated in order to list all pricing categories
     * booking this (2 ADT + 3 CHD) even though this is one family.
     * If purchasing for price-per-person (e.g. 1 ADT + 1 CHD), Passenger should be repeated for each pricing category too, but with different
     * attributes set (see Passenger type for more information)
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.Passenger passengers = 2;</code>
     */
    @java.lang.Override
    public java.util.List<io.bokun.inventory.common.api.grpc.Passenger> getPassengersList() {
      return java.util.Collections.unmodifiableList(
          instance.getPassengersList());
    }
    /**
     * <pre>
     * Who will travel on this reservation? Mandatory for both price-per-person and price-per-booking cases.
     * If purchasing for price-per-booking (e.g. 2 ADT + 3 CHD family ticket), Passenger should be repeated in order to list all pricing categories
     * booking this (2 ADT + 3 CHD) even though this is one family.
     * If purchasing for price-per-person (e.g. 1 ADT + 1 CHD), Passenger should be repeated for each pricing category too, but with different
     * attributes set (see Passenger type for more information)
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.Passenger passengers = 2;</code>
     */
    @java.lang.Override
    public int getPassengersCount() {
      return instance.getPassengersCount();
    }/**
     * <pre>
     * Who will travel on this reservation? Mandatory for both price-per-person and price-per-booking cases.
     * If purchasing for price-per-booking (e.g. 2 ADT + 3 CHD family ticket), Passenger should be repeated in order to list all pricing categories
     * booking this (2 ADT + 3 CHD) even though this is one family.
     * If purchasing for price-per-person (e.g. 1 ADT + 1 CHD), Passenger should be repeated for each pricing category too, but with different
     * attributes set (see Passenger type for more information)
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.Passenger passengers = 2;</code>
     */
    @java.lang.Override
    public io.bokun.inventory.common.api.grpc.Passenger getPassengers(int index) {
      return instance.getPassengers(index);
    }
    /**
     * <pre>
     * Who will travel on this reservation? Mandatory for both price-per-person and price-per-booking cases.
     * If purchasing for price-per-booking (e.g. 2 ADT + 3 CHD family ticket), Passenger should be repeated in order to list all pricing categories
     * booking this (2 ADT + 3 CHD) even though this is one family.
     * If purchasing for price-per-person (e.g. 1 ADT + 1 CHD), Passenger should be repeated for each pricing category too, but with different
     * attributes set (see Passenger type for more information)
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.Passenger passengers = 2;</code>
     */
    public Builder setPassengers(
        int index, io.bokun.inventory.common.api.grpc.Passenger value) {
      copyOnWrite();
      instance.setPassengers(index, value);
      return this;
    }
    /**
     * <pre>
     * Who will travel on this reservation? Mandatory for both price-per-person and price-per-booking cases.
     * If purchasing for price-per-booking (e.g. 2 ADT + 3 CHD family ticket), Passenger should be repeated in order to list all pricing categories
     * booking this (2 ADT + 3 CHD) even though this is one family.
     * If purchasing for price-per-person (e.g. 1 ADT + 1 CHD), Passenger should be repeated for each pricing category too, but with different
     * attributes set (see Passenger type for more information)
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.Passenger passengers = 2;</code>
     */
    public Builder setPassengers(
        int index, io.bokun.inventory.common.api.grpc.Passenger.Builder builderForValue) {
      copyOnWrite();
      instance.setPassengers(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Who will travel on this reservation? Mandatory for both price-per-person and price-per-booking cases.
     * If purchasing for price-per-booking (e.g. 2 ADT + 3 CHD family ticket), Passenger should be repeated in order to list all pricing categories
     * booking this (2 ADT + 3 CHD) even though this is one family.
     * If purchasing for price-per-person (e.g. 1 ADT + 1 CHD), Passenger should be repeated for each pricing category too, but with different
     * attributes set (see Passenger type for more information)
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.Passenger passengers = 2;</code>
     */
    public Builder addPassengers(io.bokun.inventory.common.api.grpc.Passenger value) {
      copyOnWrite();
      instance.addPassengers(value);
      return this;
    }
    /**
     * <pre>
     * Who will travel on this reservation? Mandatory for both price-per-person and price-per-booking cases.
     * If purchasing for price-per-booking (e.g. 2 ADT + 3 CHD family ticket), Passenger should be repeated in order to list all pricing categories
     * booking this (2 ADT + 3 CHD) even though this is one family.
     * If purchasing for price-per-person (e.g. 1 ADT + 1 CHD), Passenger should be repeated for each pricing category too, but with different
     * attributes set (see Passenger type for more information)
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.Passenger passengers = 2;</code>
     */
    public Builder addPassengers(
        int index, io.bokun.inventory.common.api.grpc.Passenger value) {
      copyOnWrite();
      instance.addPassengers(index, value);
      return this;
    }
    /**
     * <pre>
     * Who will travel on this reservation? Mandatory for both price-per-person and price-per-booking cases.
     * If purchasing for price-per-booking (e.g. 2 ADT + 3 CHD family ticket), Passenger should be repeated in order to list all pricing categories
     * booking this (2 ADT + 3 CHD) even though this is one family.
     * If purchasing for price-per-person (e.g. 1 ADT + 1 CHD), Passenger should be repeated for each pricing category too, but with different
     * attributes set (see Passenger type for more information)
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.Passenger passengers = 2;</code>
     */
    public Builder addPassengers(
        io.bokun.inventory.common.api.grpc.Passenger.Builder builderForValue) {
      copyOnWrite();
      instance.addPassengers(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Who will travel on this reservation? Mandatory for both price-per-person and price-per-booking cases.
     * If purchasing for price-per-booking (e.g. 2 ADT + 3 CHD family ticket), Passenger should be repeated in order to list all pricing categories
     * booking this (2 ADT + 3 CHD) even though this is one family.
     * If purchasing for price-per-person (e.g. 1 ADT + 1 CHD), Passenger should be repeated for each pricing category too, but with different
     * attributes set (see Passenger type for more information)
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.Passenger passengers = 2;</code>
     */
    public Builder addPassengers(
        int index, io.bokun.inventory.common.api.grpc.Passenger.Builder builderForValue) {
      copyOnWrite();
      instance.addPassengers(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Who will travel on this reservation? Mandatory for both price-per-person and price-per-booking cases.
     * If purchasing for price-per-booking (e.g. 2 ADT + 3 CHD family ticket), Passenger should be repeated in order to list all pricing categories
     * booking this (2 ADT + 3 CHD) even though this is one family.
     * If purchasing for price-per-person (e.g. 1 ADT + 1 CHD), Passenger should be repeated for each pricing category too, but with different
     * attributes set (see Passenger type for more information)
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.Passenger passengers = 2;</code>
     */
    public Builder addAllPassengers(
        java.lang.Iterable<? extends io.bokun.inventory.common.api.grpc.Passenger> values) {
      copyOnWrite();
      instance.addAllPassengers(values);
      return this;
    }
    /**
     * <pre>
     * Who will travel on this reservation? Mandatory for both price-per-person and price-per-booking cases.
     * If purchasing for price-per-booking (e.g. 2 ADT + 3 CHD family ticket), Passenger should be repeated in order to list all pricing categories
     * booking this (2 ADT + 3 CHD) even though this is one family.
     * If purchasing for price-per-person (e.g. 1 ADT + 1 CHD), Passenger should be repeated for each pricing category too, but with different
     * attributes set (see Passenger type for more information)
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.Passenger passengers = 2;</code>
     */
    public Builder clearPassengers() {
      copyOnWrite();
      instance.clearPassengers();
      return this;
    }
    /**
     * <pre>
     * Who will travel on this reservation? Mandatory for both price-per-person and price-per-booking cases.
     * If purchasing for price-per-booking (e.g. 2 ADT + 3 CHD family ticket), Passenger should be repeated in order to list all pricing categories
     * booking this (2 ADT + 3 CHD) even though this is one family.
     * If purchasing for price-per-person (e.g. 1 ADT + 1 CHD), Passenger should be repeated for each pricing category too, but with different
     * attributes set (see Passenger type for more information)
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.Passenger passengers = 2;</code>
     */
    public Builder removePassengers(int index) {
      copyOnWrite();
      instance.removePassengers(index);
      return this;
    }

    /**
     * <pre>
     * How much has been paid for this, in case this was priced per booking.
     * If this was priced per person, this field should be left unassigned.
     * </pre>
     *
     * <code>.io.bokun.inventory.common.api.grpc.Price pricePerBooking = 3;</code>
     */
    @java.lang.Override
    public boolean hasPricePerBooking() {
      return instance.hasPricePerBooking();
    }
    /**
     * <pre>
     * How much has been paid for this, in case this was priced per booking.
     * If this was priced per person, this field should be left unassigned.
     * </pre>
     *
     * <code>.io.bokun.inventory.common.api.grpc.Price pricePerBooking = 3;</code>
     */
    @java.lang.Override
    public io.bokun.inventory.common.api.grpc.Price getPricePerBooking() {
      return instance.getPricePerBooking();
    }
    /**
     * <pre>
     * How much has been paid for this, in case this was priced per booking.
     * If this was priced per person, this field should be left unassigned.
     * </pre>
     *
     * <code>.io.bokun.inventory.common.api.grpc.Price pricePerBooking = 3;</code>
     */
    public Builder setPricePerBooking(io.bokun.inventory.common.api.grpc.Price value) {
      copyOnWrite();
      instance.setPricePerBooking(value);
      return this;
      }
    /**
     * <pre>
     * How much has been paid for this, in case this was priced per booking.
     * If this was priced per person, this field should be left unassigned.
     * </pre>
     *
     * <code>.io.bokun.inventory.common.api.grpc.Price pricePerBooking = 3;</code>
     */
    public Builder setPricePerBooking(
        io.bokun.inventory.common.api.grpc.Price.Builder builderForValue) {
      copyOnWrite();
      instance.setPricePerBooking(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * How much has been paid for this, in case this was priced per booking.
     * If this was priced per person, this field should be left unassigned.
     * </pre>
     *
     * <code>.io.bokun.inventory.common.api.grpc.Price pricePerBooking = 3;</code>
     */
    public Builder mergePricePerBooking(io.bokun.inventory.common.api.grpc.Price value) {
      copyOnWrite();
      instance.mergePricePerBooking(value);
      return this;
    }
    /**
     * <pre>
     * How much has been paid for this, in case this was priced per booking.
     * If this was priced per person, this field should be left unassigned.
     * </pre>
     *
     * <code>.io.bokun.inventory.common.api.grpc.Price pricePerBooking = 3;</code>
     */
    public Builder clearPricePerBooking() {  copyOnWrite();
      instance.clearPricePerBooking();
      return this;
    }

    /**
     * <pre>
     * Deprecated. Do not use. Refer to Passengers section which has extraBookings instead.
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBooking = 4;</code>
     */
    @java.lang.Override
    public java.util.List<io.bokun.inventory.common.api.grpc.ExtraBooking> getExtraBookingList() {
      return java.util.Collections.unmodifiableList(
          instance.getExtraBookingList());
    }
    /**
     * <pre>
     * Deprecated. Do not use. Refer to Passengers section which has extraBookings instead.
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBooking = 4;</code>
     */
    @java.lang.Override
    public int getExtraBookingCount() {
      return instance.getExtraBookingCount();
    }/**
     * <pre>
     * Deprecated. Do not use. Refer to Passengers section which has extraBookings instead.
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBooking = 4;</code>
     */
    @java.lang.Override
    public io.bokun.inventory.common.api.grpc.ExtraBooking getExtraBooking(int index) {
      return instance.getExtraBooking(index);
    }
    /**
     * <pre>
     * Deprecated. Do not use. Refer to Passengers section which has extraBookings instead.
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBooking = 4;</code>
     */
    public Builder setExtraBooking(
        int index, io.bokun.inventory.common.api.grpc.ExtraBooking value) {
      copyOnWrite();
      instance.setExtraBooking(index, value);
      return this;
    }
    /**
     * <pre>
     * Deprecated. Do not use. Refer to Passengers section which has extraBookings instead.
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBooking = 4;</code>
     */
    public Builder setExtraBooking(
        int index, io.bokun.inventory.common.api.grpc.ExtraBooking.Builder builderForValue) {
      copyOnWrite();
      instance.setExtraBooking(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Deprecated. Do not use. Refer to Passengers section which has extraBookings instead.
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBooking = 4;</code>
     */
    public Builder addExtraBooking(io.bokun.inventory.common.api.grpc.ExtraBooking value) {
      copyOnWrite();
      instance.addExtraBooking(value);
      return this;
    }
    /**
     * <pre>
     * Deprecated. Do not use. Refer to Passengers section which has extraBookings instead.
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBooking = 4;</code>
     */
    public Builder addExtraBooking(
        int index, io.bokun.inventory.common.api.grpc.ExtraBooking value) {
      copyOnWrite();
      instance.addExtraBooking(index, value);
      return this;
    }
    /**
     * <pre>
     * Deprecated. Do not use. Refer to Passengers section which has extraBookings instead.
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBooking = 4;</code>
     */
    public Builder addExtraBooking(
        io.bokun.inventory.common.api.grpc.ExtraBooking.Builder builderForValue) {
      copyOnWrite();
      instance.addExtraBooking(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Deprecated. Do not use. Refer to Passengers section which has extraBookings instead.
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBooking = 4;</code>
     */
    public Builder addExtraBooking(
        int index, io.bokun.inventory.common.api.grpc.ExtraBooking.Builder builderForValue) {
      copyOnWrite();
      instance.addExtraBooking(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Deprecated. Do not use. Refer to Passengers section which has extraBookings instead.
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBooking = 4;</code>
     */
    public Builder addAllExtraBooking(
        java.lang.Iterable<? extends io.bokun.inventory.common.api.grpc.ExtraBooking> values) {
      copyOnWrite();
      instance.addAllExtraBooking(values);
      return this;
    }
    /**
     * <pre>
     * Deprecated. Do not use. Refer to Passengers section which has extraBookings instead.
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBooking = 4;</code>
     */
    public Builder clearExtraBooking() {
      copyOnWrite();
      instance.clearExtraBooking();
      return this;
    }
    /**
     * <pre>
     * Deprecated. Do not use. Refer to Passengers section which has extraBookings instead.
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBooking = 4;</code>
     */
    public Builder removeExtraBooking(int index) {
      copyOnWrite();
      instance.removeExtraBooking(index);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:io.bokun.inventory.common.api.grpc.Reservation)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new io.bokun.inventory.common.api.grpc.Reservation();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "rateId_",
            "passengers_",
            io.bokun.inventory.common.api.grpc.Passenger.class,
            "pricePerBooking_",
            "extraBooking_",
            io.bokun.inventory.common.api.grpc.ExtraBooking.class,
          };
          java.lang.String info =
              "\u0000\u0004\u0000\u0000\u0001\u0004\u0004\u0000\u0002\u0000\u0001\u0208\u0002\u001b" +
              "\u0003\t\u0004\u001b";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<io.bokun.inventory.common.api.grpc.Reservation> parser = PARSER;
        if (parser == null) {
          synchronized (io.bokun.inventory.common.api.grpc.Reservation.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<io.bokun.inventory.common.api.grpc.Reservation>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:io.bokun.inventory.common.api.grpc.Reservation)
  private static final io.bokun.inventory.common.api.grpc.Reservation DEFAULT_INSTANCE;
  static {
    Reservation defaultInstance = new Reservation();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      Reservation.class, defaultInstance);
  }

  public static io.bokun.inventory.common.api.grpc.Reservation getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<Reservation> PARSER;

  public static com.google.protobuf.Parser<Reservation> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

