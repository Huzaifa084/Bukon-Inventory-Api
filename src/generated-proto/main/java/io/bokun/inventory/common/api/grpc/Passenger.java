// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

package io.bokun.inventory.common.api.grpc;

/**
 * <pre>
 * Passenger participating in a tour/activity event.
 * </pre>
 *
 * Protobuf type {@code io.bokun.inventory.common.api.grpc.Passenger}
 */
public  final class Passenger extends
    com.google.protobuf.GeneratedMessageLite<
        Passenger, Passenger.Builder> implements
    // @@protoc_insertion_point(message_implements:io.bokun.inventory.common.api.grpc.Passenger)
    PassengerOrBuilder {
  private Passenger() {
    pricingCategoryId_ = "";
    extraBookings_ = emptyProtobufList();
  }
  public static final int PRICINGCATEGORYID_FIELD_NUMBER = 1;
  private java.lang.String pricingCategoryId_;
  /**
   * <pre>
   * What kind of pricing category (Adult, Child, etc.) this is booked. Refers to a pricing category in Bokun. Mandatory for both price-per-person
   * and price-per-booking cases.
   * </pre>
   *
   * <code>string pricingCategoryId = 1;</code>
   * @return The pricingCategoryId.
   */
  @java.lang.Override
  public java.lang.String getPricingCategoryId() {
    return pricingCategoryId_;
  }
  /**
   * <pre>
   * What kind of pricing category (Adult, Child, etc.) this is booked. Refers to a pricing category in Bokun. Mandatory for both price-per-person
   * and price-per-booking cases.
   * </pre>
   *
   * <code>string pricingCategoryId = 1;</code>
   * @return The bytes for pricingCategoryId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getPricingCategoryIdBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(pricingCategoryId_);
  }
  /**
   * <pre>
   * What kind of pricing category (Adult, Child, etc.) this is booked. Refers to a pricing category in Bokun. Mandatory for both price-per-person
   * and price-per-booking cases.
   * </pre>
   *
   * <code>string pricingCategoryId = 1;</code>
   * @param value The pricingCategoryId to set.
   */
  private void setPricingCategoryId(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    pricingCategoryId_ = value;
  }
  /**
   * <pre>
   * What kind of pricing category (Adult, Child, etc.) this is booked. Refers to a pricing category in Bokun. Mandatory for both price-per-person
   * and price-per-booking cases.
   * </pre>
   *
   * <code>string pricingCategoryId = 1;</code>
   */
  private void clearPricingCategoryId() {
    
    pricingCategoryId_ = getDefaultInstance().getPricingCategoryId();
  }
  /**
   * <pre>
   * What kind of pricing category (Adult, Child, etc.) this is booked. Refers to a pricing category in Bokun. Mandatory for both price-per-person
   * and price-per-booking cases.
   * </pre>
   *
   * <code>string pricingCategoryId = 1;</code>
   * @param value The bytes for pricingCategoryId to set.
   */
  private void setPricingCategoryIdBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    pricingCategoryId_ = value.toStringUtf8();
    
  }

  public static final int CONTACT_FIELD_NUMBER = 2;
  private io.bokun.inventory.common.api.grpc.Contact contact_;
  /**
   * <pre>
   * Contact of each passenger. Mandatory. Parts of this object may be enforced via ProductDescription::enforcedTravellerFields.
   * </pre>
   *
   * <code>.io.bokun.inventory.common.api.grpc.Contact contact = 2;</code>
   */
  @java.lang.Override
  public boolean hasContact() {
    return contact_ != null;
  }
  /**
   * <pre>
   * Contact of each passenger. Mandatory. Parts of this object may be enforced via ProductDescription::enforcedTravellerFields.
   * </pre>
   *
   * <code>.io.bokun.inventory.common.api.grpc.Contact contact = 2;</code>
   */
  @java.lang.Override
  public io.bokun.inventory.common.api.grpc.Contact getContact() {
    return contact_ == null ? io.bokun.inventory.common.api.grpc.Contact.getDefaultInstance() : contact_;
  }
  /**
   * <pre>
   * Contact of each passenger. Mandatory. Parts of this object may be enforced via ProductDescription::enforcedTravellerFields.
   * </pre>
   *
   * <code>.io.bokun.inventory.common.api.grpc.Contact contact = 2;</code>
   */
  private void setContact(io.bokun.inventory.common.api.grpc.Contact value) {
    value.getClass();
  contact_ = value;
    
    }
  /**
   * <pre>
   * Contact of each passenger. Mandatory. Parts of this object may be enforced via ProductDescription::enforcedTravellerFields.
   * </pre>
   *
   * <code>.io.bokun.inventory.common.api.grpc.Contact contact = 2;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeContact(io.bokun.inventory.common.api.grpc.Contact value) {
    value.getClass();
  if (contact_ != null &&
        contact_ != io.bokun.inventory.common.api.grpc.Contact.getDefaultInstance()) {
      contact_ =
        io.bokun.inventory.common.api.grpc.Contact.newBuilder(contact_).mergeFrom(value).buildPartial();
    } else {
      contact_ = value;
    }
    
  }
  /**
   * <pre>
   * Contact of each passenger. Mandatory. Parts of this object may be enforced via ProductDescription::enforcedTravellerFields.
   * </pre>
   *
   * <code>.io.bokun.inventory.common.api.grpc.Contact contact = 2;</code>
   */
  private void clearContact() {  contact_ = null;
    
  }

  public static final int PRICEPERPASSENGER_FIELD_NUMBER = 3;
  private io.bokun.inventory.common.api.grpc.Price pricePerPassenger_;
  /**
   * <pre>
   * Should only be set if priced per passenger. If priced per booking then this should be left unassigned.
   * </pre>
   *
   * <code>.io.bokun.inventory.common.api.grpc.Price pricePerPassenger = 3;</code>
   */
  @java.lang.Override
  public boolean hasPricePerPassenger() {
    return pricePerPassenger_ != null;
  }
  /**
   * <pre>
   * Should only be set if priced per passenger. If priced per booking then this should be left unassigned.
   * </pre>
   *
   * <code>.io.bokun.inventory.common.api.grpc.Price pricePerPassenger = 3;</code>
   */
  @java.lang.Override
  public io.bokun.inventory.common.api.grpc.Price getPricePerPassenger() {
    return pricePerPassenger_ == null ? io.bokun.inventory.common.api.grpc.Price.getDefaultInstance() : pricePerPassenger_;
  }
  /**
   * <pre>
   * Should only be set if priced per passenger. If priced per booking then this should be left unassigned.
   * </pre>
   *
   * <code>.io.bokun.inventory.common.api.grpc.Price pricePerPassenger = 3;</code>
   */
  private void setPricePerPassenger(io.bokun.inventory.common.api.grpc.Price value) {
    value.getClass();
  pricePerPassenger_ = value;
    
    }
  /**
   * <pre>
   * Should only be set if priced per passenger. If priced per booking then this should be left unassigned.
   * </pre>
   *
   * <code>.io.bokun.inventory.common.api.grpc.Price pricePerPassenger = 3;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergePricePerPassenger(io.bokun.inventory.common.api.grpc.Price value) {
    value.getClass();
  if (pricePerPassenger_ != null &&
        pricePerPassenger_ != io.bokun.inventory.common.api.grpc.Price.getDefaultInstance()) {
      pricePerPassenger_ =
        io.bokun.inventory.common.api.grpc.Price.newBuilder(pricePerPassenger_).mergeFrom(value).buildPartial();
    } else {
      pricePerPassenger_ = value;
    }
    
  }
  /**
   * <pre>
   * Should only be set if priced per passenger. If priced per booking then this should be left unassigned.
   * </pre>
   *
   * <code>.io.bokun.inventory.common.api.grpc.Price pricePerPassenger = 3;</code>
   */
  private void clearPricePerPassenger() {  pricePerPassenger_ = null;
    
  }

  public static final int EXTRABOOKINGS_FIELD_NUMBER = 4;
  private com.google.protobuf.Internal.ProtobufList<io.bokun.inventory.common.api.grpc.ExtraBooking> extraBookings_;
  /**
   * <pre>
   * What extras (if any) had been booked by this particular pricing category?
   * a) If extra is booked per person, one of the passengers will refer to all extra bookings for this pricing category.
   * For example: let's say somebody booked 2 Adults + 2 Children + 3 Adult extras (for two Adults) + 2 extras for children (1 extra for each child).
   * The resulting structure will be as follows:
   *   - Adult#1 booking
   *     - Adult extra#1
   *     - Adult extra#2
   *     - Adult extra#3
   *   - Adult#2 booking
   *     - [no extras]
   *   - Child#1 booking
   *     - Child extra #1
   *     - Child extra #2
   *   - Child#2 booking
   *     - [no extras]
   * This is because it is not possible to determine which extra (and how many) goes to which pricing category
   * b) If extra is booked per booking: all extraBookings will be attached to one of pricing categories (without guarantees which in particular).
   * For example: let's say somebody booked 1 Adult + 2 Children + 3 extras.
   * The resulting structure will be as follows:
   *   - Adult booking
   *     - per booking extra#1
   *     - per booking extra#1
   *     - per booking extra#1
   *   - Child#1 booking
   *     - [no extras]
   *   - Child#2 booking
   *     - [no extras]
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBookings = 4;</code>
   */
  @java.lang.Override
  public java.util.List<io.bokun.inventory.common.api.grpc.ExtraBooking> getExtraBookingsList() {
    return extraBookings_;
  }
  /**
   * <pre>
   * What extras (if any) had been booked by this particular pricing category?
   * a) If extra is booked per person, one of the passengers will refer to all extra bookings for this pricing category.
   * For example: let's say somebody booked 2 Adults + 2 Children + 3 Adult extras (for two Adults) + 2 extras for children (1 extra for each child).
   * The resulting structure will be as follows:
   *   - Adult#1 booking
   *     - Adult extra#1
   *     - Adult extra#2
   *     - Adult extra#3
   *   - Adult#2 booking
   *     - [no extras]
   *   - Child#1 booking
   *     - Child extra #1
   *     - Child extra #2
   *   - Child#2 booking
   *     - [no extras]
   * This is because it is not possible to determine which extra (and how many) goes to which pricing category
   * b) If extra is booked per booking: all extraBookings will be attached to one of pricing categories (without guarantees which in particular).
   * For example: let's say somebody booked 1 Adult + 2 Children + 3 extras.
   * The resulting structure will be as follows:
   *   - Adult booking
   *     - per booking extra#1
   *     - per booking extra#1
   *     - per booking extra#1
   *   - Child#1 booking
   *     - [no extras]
   *   - Child#2 booking
   *     - [no extras]
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBookings = 4;</code>
   */
  public java.util.List<? extends io.bokun.inventory.common.api.grpc.ExtraBookingOrBuilder> 
      getExtraBookingsOrBuilderList() {
    return extraBookings_;
  }
  /**
   * <pre>
   * What extras (if any) had been booked by this particular pricing category?
   * a) If extra is booked per person, one of the passengers will refer to all extra bookings for this pricing category.
   * For example: let's say somebody booked 2 Adults + 2 Children + 3 Adult extras (for two Adults) + 2 extras for children (1 extra for each child).
   * The resulting structure will be as follows:
   *   - Adult#1 booking
   *     - Adult extra#1
   *     - Adult extra#2
   *     - Adult extra#3
   *   - Adult#2 booking
   *     - [no extras]
   *   - Child#1 booking
   *     - Child extra #1
   *     - Child extra #2
   *   - Child#2 booking
   *     - [no extras]
   * This is because it is not possible to determine which extra (and how many) goes to which pricing category
   * b) If extra is booked per booking: all extraBookings will be attached to one of pricing categories (without guarantees which in particular).
   * For example: let's say somebody booked 1 Adult + 2 Children + 3 extras.
   * The resulting structure will be as follows:
   *   - Adult booking
   *     - per booking extra#1
   *     - per booking extra#1
   *     - per booking extra#1
   *   - Child#1 booking
   *     - [no extras]
   *   - Child#2 booking
   *     - [no extras]
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBookings = 4;</code>
   */
  @java.lang.Override
  public int getExtraBookingsCount() {
    return extraBookings_.size();
  }
  /**
   * <pre>
   * What extras (if any) had been booked by this particular pricing category?
   * a) If extra is booked per person, one of the passengers will refer to all extra bookings for this pricing category.
   * For example: let's say somebody booked 2 Adults + 2 Children + 3 Adult extras (for two Adults) + 2 extras for children (1 extra for each child).
   * The resulting structure will be as follows:
   *   - Adult#1 booking
   *     - Adult extra#1
   *     - Adult extra#2
   *     - Adult extra#3
   *   - Adult#2 booking
   *     - [no extras]
   *   - Child#1 booking
   *     - Child extra #1
   *     - Child extra #2
   *   - Child#2 booking
   *     - [no extras]
   * This is because it is not possible to determine which extra (and how many) goes to which pricing category
   * b) If extra is booked per booking: all extraBookings will be attached to one of pricing categories (without guarantees which in particular).
   * For example: let's say somebody booked 1 Adult + 2 Children + 3 extras.
   * The resulting structure will be as follows:
   *   - Adult booking
   *     - per booking extra#1
   *     - per booking extra#1
   *     - per booking extra#1
   *   - Child#1 booking
   *     - [no extras]
   *   - Child#2 booking
   *     - [no extras]
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBookings = 4;</code>
   */
  @java.lang.Override
  public io.bokun.inventory.common.api.grpc.ExtraBooking getExtraBookings(int index) {
    return extraBookings_.get(index);
  }
  /**
   * <pre>
   * What extras (if any) had been booked by this particular pricing category?
   * a) If extra is booked per person, one of the passengers will refer to all extra bookings for this pricing category.
   * For example: let's say somebody booked 2 Adults + 2 Children + 3 Adult extras (for two Adults) + 2 extras for children (1 extra for each child).
   * The resulting structure will be as follows:
   *   - Adult#1 booking
   *     - Adult extra#1
   *     - Adult extra#2
   *     - Adult extra#3
   *   - Adult#2 booking
   *     - [no extras]
   *   - Child#1 booking
   *     - Child extra #1
   *     - Child extra #2
   *   - Child#2 booking
   *     - [no extras]
   * This is because it is not possible to determine which extra (and how many) goes to which pricing category
   * b) If extra is booked per booking: all extraBookings will be attached to one of pricing categories (without guarantees which in particular).
   * For example: let's say somebody booked 1 Adult + 2 Children + 3 extras.
   * The resulting structure will be as follows:
   *   - Adult booking
   *     - per booking extra#1
   *     - per booking extra#1
   *     - per booking extra#1
   *   - Child#1 booking
   *     - [no extras]
   *   - Child#2 booking
   *     - [no extras]
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBookings = 4;</code>
   */
  public io.bokun.inventory.common.api.grpc.ExtraBookingOrBuilder getExtraBookingsOrBuilder(
      int index) {
    return extraBookings_.get(index);
  }
  private void ensureExtraBookingsIsMutable() {
    com.google.protobuf.Internal.ProtobufList<io.bokun.inventory.common.api.grpc.ExtraBooking> tmp = extraBookings_;
    if (!tmp.isModifiable()) {
      extraBookings_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }

  /**
   * <pre>
   * What extras (if any) had been booked by this particular pricing category?
   * a) If extra is booked per person, one of the passengers will refer to all extra bookings for this pricing category.
   * For example: let's say somebody booked 2 Adults + 2 Children + 3 Adult extras (for two Adults) + 2 extras for children (1 extra for each child).
   * The resulting structure will be as follows:
   *   - Adult#1 booking
   *     - Adult extra#1
   *     - Adult extra#2
   *     - Adult extra#3
   *   - Adult#2 booking
   *     - [no extras]
   *   - Child#1 booking
   *     - Child extra #1
   *     - Child extra #2
   *   - Child#2 booking
   *     - [no extras]
   * This is because it is not possible to determine which extra (and how many) goes to which pricing category
   * b) If extra is booked per booking: all extraBookings will be attached to one of pricing categories (without guarantees which in particular).
   * For example: let's say somebody booked 1 Adult + 2 Children + 3 extras.
   * The resulting structure will be as follows:
   *   - Adult booking
   *     - per booking extra#1
   *     - per booking extra#1
   *     - per booking extra#1
   *   - Child#1 booking
   *     - [no extras]
   *   - Child#2 booking
   *     - [no extras]
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBookings = 4;</code>
   */
  private void setExtraBookings(
      int index, io.bokun.inventory.common.api.grpc.ExtraBooking value) {
    value.getClass();
  ensureExtraBookingsIsMutable();
    extraBookings_.set(index, value);
  }
  /**
   * <pre>
   * What extras (if any) had been booked by this particular pricing category?
   * a) If extra is booked per person, one of the passengers will refer to all extra bookings for this pricing category.
   * For example: let's say somebody booked 2 Adults + 2 Children + 3 Adult extras (for two Adults) + 2 extras for children (1 extra for each child).
   * The resulting structure will be as follows:
   *   - Adult#1 booking
   *     - Adult extra#1
   *     - Adult extra#2
   *     - Adult extra#3
   *   - Adult#2 booking
   *     - [no extras]
   *   - Child#1 booking
   *     - Child extra #1
   *     - Child extra #2
   *   - Child#2 booking
   *     - [no extras]
   * This is because it is not possible to determine which extra (and how many) goes to which pricing category
   * b) If extra is booked per booking: all extraBookings will be attached to one of pricing categories (without guarantees which in particular).
   * For example: let's say somebody booked 1 Adult + 2 Children + 3 extras.
   * The resulting structure will be as follows:
   *   - Adult booking
   *     - per booking extra#1
   *     - per booking extra#1
   *     - per booking extra#1
   *   - Child#1 booking
   *     - [no extras]
   *   - Child#2 booking
   *     - [no extras]
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBookings = 4;</code>
   */
  private void addExtraBookings(io.bokun.inventory.common.api.grpc.ExtraBooking value) {
    value.getClass();
  ensureExtraBookingsIsMutable();
    extraBookings_.add(value);
  }
  /**
   * <pre>
   * What extras (if any) had been booked by this particular pricing category?
   * a) If extra is booked per person, one of the passengers will refer to all extra bookings for this pricing category.
   * For example: let's say somebody booked 2 Adults + 2 Children + 3 Adult extras (for two Adults) + 2 extras for children (1 extra for each child).
   * The resulting structure will be as follows:
   *   - Adult#1 booking
   *     - Adult extra#1
   *     - Adult extra#2
   *     - Adult extra#3
   *   - Adult#2 booking
   *     - [no extras]
   *   - Child#1 booking
   *     - Child extra #1
   *     - Child extra #2
   *   - Child#2 booking
   *     - [no extras]
   * This is because it is not possible to determine which extra (and how many) goes to which pricing category
   * b) If extra is booked per booking: all extraBookings will be attached to one of pricing categories (without guarantees which in particular).
   * For example: let's say somebody booked 1 Adult + 2 Children + 3 extras.
   * The resulting structure will be as follows:
   *   - Adult booking
   *     - per booking extra#1
   *     - per booking extra#1
   *     - per booking extra#1
   *   - Child#1 booking
   *     - [no extras]
   *   - Child#2 booking
   *     - [no extras]
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBookings = 4;</code>
   */
  private void addExtraBookings(
      int index, io.bokun.inventory.common.api.grpc.ExtraBooking value) {
    value.getClass();
  ensureExtraBookingsIsMutable();
    extraBookings_.add(index, value);
  }
  /**
   * <pre>
   * What extras (if any) had been booked by this particular pricing category?
   * a) If extra is booked per person, one of the passengers will refer to all extra bookings for this pricing category.
   * For example: let's say somebody booked 2 Adults + 2 Children + 3 Adult extras (for two Adults) + 2 extras for children (1 extra for each child).
   * The resulting structure will be as follows:
   *   - Adult#1 booking
   *     - Adult extra#1
   *     - Adult extra#2
   *     - Adult extra#3
   *   - Adult#2 booking
   *     - [no extras]
   *   - Child#1 booking
   *     - Child extra #1
   *     - Child extra #2
   *   - Child#2 booking
   *     - [no extras]
   * This is because it is not possible to determine which extra (and how many) goes to which pricing category
   * b) If extra is booked per booking: all extraBookings will be attached to one of pricing categories (without guarantees which in particular).
   * For example: let's say somebody booked 1 Adult + 2 Children + 3 extras.
   * The resulting structure will be as follows:
   *   - Adult booking
   *     - per booking extra#1
   *     - per booking extra#1
   *     - per booking extra#1
   *   - Child#1 booking
   *     - [no extras]
   *   - Child#2 booking
   *     - [no extras]
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBookings = 4;</code>
   */
  private void addAllExtraBookings(
      java.lang.Iterable<? extends io.bokun.inventory.common.api.grpc.ExtraBooking> values) {
    ensureExtraBookingsIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, extraBookings_);
  }
  /**
   * <pre>
   * What extras (if any) had been booked by this particular pricing category?
   * a) If extra is booked per person, one of the passengers will refer to all extra bookings for this pricing category.
   * For example: let's say somebody booked 2 Adults + 2 Children + 3 Adult extras (for two Adults) + 2 extras for children (1 extra for each child).
   * The resulting structure will be as follows:
   *   - Adult#1 booking
   *     - Adult extra#1
   *     - Adult extra#2
   *     - Adult extra#3
   *   - Adult#2 booking
   *     - [no extras]
   *   - Child#1 booking
   *     - Child extra #1
   *     - Child extra #2
   *   - Child#2 booking
   *     - [no extras]
   * This is because it is not possible to determine which extra (and how many) goes to which pricing category
   * b) If extra is booked per booking: all extraBookings will be attached to one of pricing categories (without guarantees which in particular).
   * For example: let's say somebody booked 1 Adult + 2 Children + 3 extras.
   * The resulting structure will be as follows:
   *   - Adult booking
   *     - per booking extra#1
   *     - per booking extra#1
   *     - per booking extra#1
   *   - Child#1 booking
   *     - [no extras]
   *   - Child#2 booking
   *     - [no extras]
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBookings = 4;</code>
   */
  private void clearExtraBookings() {
    extraBookings_ = emptyProtobufList();
  }
  /**
   * <pre>
   * What extras (if any) had been booked by this particular pricing category?
   * a) If extra is booked per person, one of the passengers will refer to all extra bookings for this pricing category.
   * For example: let's say somebody booked 2 Adults + 2 Children + 3 Adult extras (for two Adults) + 2 extras for children (1 extra for each child).
   * The resulting structure will be as follows:
   *   - Adult#1 booking
   *     - Adult extra#1
   *     - Adult extra#2
   *     - Adult extra#3
   *   - Adult#2 booking
   *     - [no extras]
   *   - Child#1 booking
   *     - Child extra #1
   *     - Child extra #2
   *   - Child#2 booking
   *     - [no extras]
   * This is because it is not possible to determine which extra (and how many) goes to which pricing category
   * b) If extra is booked per booking: all extraBookings will be attached to one of pricing categories (without guarantees which in particular).
   * For example: let's say somebody booked 1 Adult + 2 Children + 3 extras.
   * The resulting structure will be as follows:
   *   - Adult booking
   *     - per booking extra#1
   *     - per booking extra#1
   *     - per booking extra#1
   *   - Child#1 booking
   *     - [no extras]
   *   - Child#2 booking
   *     - [no extras]
   * </pre>
   *
   * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBookings = 4;</code>
   */
  private void removeExtraBookings(int index) {
    ensureExtraBookingsIsMutable();
    extraBookings_.remove(index);
  }

  public static io.bokun.inventory.common.api.grpc.Passenger parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static io.bokun.inventory.common.api.grpc.Passenger parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static io.bokun.inventory.common.api.grpc.Passenger parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static io.bokun.inventory.common.api.grpc.Passenger parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static io.bokun.inventory.common.api.grpc.Passenger parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static io.bokun.inventory.common.api.grpc.Passenger parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static io.bokun.inventory.common.api.grpc.Passenger parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static io.bokun.inventory.common.api.grpc.Passenger parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static io.bokun.inventory.common.api.grpc.Passenger parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static io.bokun.inventory.common.api.grpc.Passenger parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static io.bokun.inventory.common.api.grpc.Passenger parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static io.bokun.inventory.common.api.grpc.Passenger parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(io.bokun.inventory.common.api.grpc.Passenger prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Passenger participating in a tour/activity event.
   * </pre>
   *
   * Protobuf type {@code io.bokun.inventory.common.api.grpc.Passenger}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        io.bokun.inventory.common.api.grpc.Passenger, Builder> implements
      // @@protoc_insertion_point(builder_implements:io.bokun.inventory.common.api.grpc.Passenger)
      io.bokun.inventory.common.api.grpc.PassengerOrBuilder {
    // Construct using io.bokun.inventory.common.api.grpc.Passenger.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * What kind of pricing category (Adult, Child, etc.) this is booked. Refers to a pricing category in Bokun. Mandatory for both price-per-person
     * and price-per-booking cases.
     * </pre>
     *
     * <code>string pricingCategoryId = 1;</code>
     * @return The pricingCategoryId.
     */
    @java.lang.Override
    public java.lang.String getPricingCategoryId() {
      return instance.getPricingCategoryId();
    }
    /**
     * <pre>
     * What kind of pricing category (Adult, Child, etc.) this is booked. Refers to a pricing category in Bokun. Mandatory for both price-per-person
     * and price-per-booking cases.
     * </pre>
     *
     * <code>string pricingCategoryId = 1;</code>
     * @return The bytes for pricingCategoryId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPricingCategoryIdBytes() {
      return instance.getPricingCategoryIdBytes();
    }
    /**
     * <pre>
     * What kind of pricing category (Adult, Child, etc.) this is booked. Refers to a pricing category in Bokun. Mandatory for both price-per-person
     * and price-per-booking cases.
     * </pre>
     *
     * <code>string pricingCategoryId = 1;</code>
     * @param value The pricingCategoryId to set.
     * @return This builder for chaining.
     */
    public Builder setPricingCategoryId(
        java.lang.String value) {
      copyOnWrite();
      instance.setPricingCategoryId(value);
      return this;
    }
    /**
     * <pre>
     * What kind of pricing category (Adult, Child, etc.) this is booked. Refers to a pricing category in Bokun. Mandatory for both price-per-person
     * and price-per-booking cases.
     * </pre>
     *
     * <code>string pricingCategoryId = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearPricingCategoryId() {
      copyOnWrite();
      instance.clearPricingCategoryId();
      return this;
    }
    /**
     * <pre>
     * What kind of pricing category (Adult, Child, etc.) this is booked. Refers to a pricing category in Bokun. Mandatory for both price-per-person
     * and price-per-booking cases.
     * </pre>
     *
     * <code>string pricingCategoryId = 1;</code>
     * @param value The bytes for pricingCategoryId to set.
     * @return This builder for chaining.
     */
    public Builder setPricingCategoryIdBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setPricingCategoryIdBytes(value);
      return this;
    }

    /**
     * <pre>
     * Contact of each passenger. Mandatory. Parts of this object may be enforced via ProductDescription::enforcedTravellerFields.
     * </pre>
     *
     * <code>.io.bokun.inventory.common.api.grpc.Contact contact = 2;</code>
     */
    @java.lang.Override
    public boolean hasContact() {
      return instance.hasContact();
    }
    /**
     * <pre>
     * Contact of each passenger. Mandatory. Parts of this object may be enforced via ProductDescription::enforcedTravellerFields.
     * </pre>
     *
     * <code>.io.bokun.inventory.common.api.grpc.Contact contact = 2;</code>
     */
    @java.lang.Override
    public io.bokun.inventory.common.api.grpc.Contact getContact() {
      return instance.getContact();
    }
    /**
     * <pre>
     * Contact of each passenger. Mandatory. Parts of this object may be enforced via ProductDescription::enforcedTravellerFields.
     * </pre>
     *
     * <code>.io.bokun.inventory.common.api.grpc.Contact contact = 2;</code>
     */
    public Builder setContact(io.bokun.inventory.common.api.grpc.Contact value) {
      copyOnWrite();
      instance.setContact(value);
      return this;
      }
    /**
     * <pre>
     * Contact of each passenger. Mandatory. Parts of this object may be enforced via ProductDescription::enforcedTravellerFields.
     * </pre>
     *
     * <code>.io.bokun.inventory.common.api.grpc.Contact contact = 2;</code>
     */
    public Builder setContact(
        io.bokun.inventory.common.api.grpc.Contact.Builder builderForValue) {
      copyOnWrite();
      instance.setContact(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Contact of each passenger. Mandatory. Parts of this object may be enforced via ProductDescription::enforcedTravellerFields.
     * </pre>
     *
     * <code>.io.bokun.inventory.common.api.grpc.Contact contact = 2;</code>
     */
    public Builder mergeContact(io.bokun.inventory.common.api.grpc.Contact value) {
      copyOnWrite();
      instance.mergeContact(value);
      return this;
    }
    /**
     * <pre>
     * Contact of each passenger. Mandatory. Parts of this object may be enforced via ProductDescription::enforcedTravellerFields.
     * </pre>
     *
     * <code>.io.bokun.inventory.common.api.grpc.Contact contact = 2;</code>
     */
    public Builder clearContact() {  copyOnWrite();
      instance.clearContact();
      return this;
    }

    /**
     * <pre>
     * Should only be set if priced per passenger. If priced per booking then this should be left unassigned.
     * </pre>
     *
     * <code>.io.bokun.inventory.common.api.grpc.Price pricePerPassenger = 3;</code>
     */
    @java.lang.Override
    public boolean hasPricePerPassenger() {
      return instance.hasPricePerPassenger();
    }
    /**
     * <pre>
     * Should only be set if priced per passenger. If priced per booking then this should be left unassigned.
     * </pre>
     *
     * <code>.io.bokun.inventory.common.api.grpc.Price pricePerPassenger = 3;</code>
     */
    @java.lang.Override
    public io.bokun.inventory.common.api.grpc.Price getPricePerPassenger() {
      return instance.getPricePerPassenger();
    }
    /**
     * <pre>
     * Should only be set if priced per passenger. If priced per booking then this should be left unassigned.
     * </pre>
     *
     * <code>.io.bokun.inventory.common.api.grpc.Price pricePerPassenger = 3;</code>
     */
    public Builder setPricePerPassenger(io.bokun.inventory.common.api.grpc.Price value) {
      copyOnWrite();
      instance.setPricePerPassenger(value);
      return this;
      }
    /**
     * <pre>
     * Should only be set if priced per passenger. If priced per booking then this should be left unassigned.
     * </pre>
     *
     * <code>.io.bokun.inventory.common.api.grpc.Price pricePerPassenger = 3;</code>
     */
    public Builder setPricePerPassenger(
        io.bokun.inventory.common.api.grpc.Price.Builder builderForValue) {
      copyOnWrite();
      instance.setPricePerPassenger(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Should only be set if priced per passenger. If priced per booking then this should be left unassigned.
     * </pre>
     *
     * <code>.io.bokun.inventory.common.api.grpc.Price pricePerPassenger = 3;</code>
     */
    public Builder mergePricePerPassenger(io.bokun.inventory.common.api.grpc.Price value) {
      copyOnWrite();
      instance.mergePricePerPassenger(value);
      return this;
    }
    /**
     * <pre>
     * Should only be set if priced per passenger. If priced per booking then this should be left unassigned.
     * </pre>
     *
     * <code>.io.bokun.inventory.common.api.grpc.Price pricePerPassenger = 3;</code>
     */
    public Builder clearPricePerPassenger() {  copyOnWrite();
      instance.clearPricePerPassenger();
      return this;
    }

    /**
     * <pre>
     * What extras (if any) had been booked by this particular pricing category?
     * a) If extra is booked per person, one of the passengers will refer to all extra bookings for this pricing category.
     * For example: let's say somebody booked 2 Adults + 2 Children + 3 Adult extras (for two Adults) + 2 extras for children (1 extra for each child).
     * The resulting structure will be as follows:
     *   - Adult#1 booking
     *     - Adult extra#1
     *     - Adult extra#2
     *     - Adult extra#3
     *   - Adult#2 booking
     *     - [no extras]
     *   - Child#1 booking
     *     - Child extra #1
     *     - Child extra #2
     *   - Child#2 booking
     *     - [no extras]
     * This is because it is not possible to determine which extra (and how many) goes to which pricing category
     * b) If extra is booked per booking: all extraBookings will be attached to one of pricing categories (without guarantees which in particular).
     * For example: let's say somebody booked 1 Adult + 2 Children + 3 extras.
     * The resulting structure will be as follows:
     *   - Adult booking
     *     - per booking extra#1
     *     - per booking extra#1
     *     - per booking extra#1
     *   - Child#1 booking
     *     - [no extras]
     *   - Child#2 booking
     *     - [no extras]
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBookings = 4;</code>
     */
    @java.lang.Override
    public java.util.List<io.bokun.inventory.common.api.grpc.ExtraBooking> getExtraBookingsList() {
      return java.util.Collections.unmodifiableList(
          instance.getExtraBookingsList());
    }
    /**
     * <pre>
     * What extras (if any) had been booked by this particular pricing category?
     * a) If extra is booked per person, one of the passengers will refer to all extra bookings for this pricing category.
     * For example: let's say somebody booked 2 Adults + 2 Children + 3 Adult extras (for two Adults) + 2 extras for children (1 extra for each child).
     * The resulting structure will be as follows:
     *   - Adult#1 booking
     *     - Adult extra#1
     *     - Adult extra#2
     *     - Adult extra#3
     *   - Adult#2 booking
     *     - [no extras]
     *   - Child#1 booking
     *     - Child extra #1
     *     - Child extra #2
     *   - Child#2 booking
     *     - [no extras]
     * This is because it is not possible to determine which extra (and how many) goes to which pricing category
     * b) If extra is booked per booking: all extraBookings will be attached to one of pricing categories (without guarantees which in particular).
     * For example: let's say somebody booked 1 Adult + 2 Children + 3 extras.
     * The resulting structure will be as follows:
     *   - Adult booking
     *     - per booking extra#1
     *     - per booking extra#1
     *     - per booking extra#1
     *   - Child#1 booking
     *     - [no extras]
     *   - Child#2 booking
     *     - [no extras]
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBookings = 4;</code>
     */
    @java.lang.Override
    public int getExtraBookingsCount() {
      return instance.getExtraBookingsCount();
    }/**
     * <pre>
     * What extras (if any) had been booked by this particular pricing category?
     * a) If extra is booked per person, one of the passengers will refer to all extra bookings for this pricing category.
     * For example: let's say somebody booked 2 Adults + 2 Children + 3 Adult extras (for two Adults) + 2 extras for children (1 extra for each child).
     * The resulting structure will be as follows:
     *   - Adult#1 booking
     *     - Adult extra#1
     *     - Adult extra#2
     *     - Adult extra#3
     *   - Adult#2 booking
     *     - [no extras]
     *   - Child#1 booking
     *     - Child extra #1
     *     - Child extra #2
     *   - Child#2 booking
     *     - [no extras]
     * This is because it is not possible to determine which extra (and how many) goes to which pricing category
     * b) If extra is booked per booking: all extraBookings will be attached to one of pricing categories (without guarantees which in particular).
     * For example: let's say somebody booked 1 Adult + 2 Children + 3 extras.
     * The resulting structure will be as follows:
     *   - Adult booking
     *     - per booking extra#1
     *     - per booking extra#1
     *     - per booking extra#1
     *   - Child#1 booking
     *     - [no extras]
     *   - Child#2 booking
     *     - [no extras]
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBookings = 4;</code>
     */
    @java.lang.Override
    public io.bokun.inventory.common.api.grpc.ExtraBooking getExtraBookings(int index) {
      return instance.getExtraBookings(index);
    }
    /**
     * <pre>
     * What extras (if any) had been booked by this particular pricing category?
     * a) If extra is booked per person, one of the passengers will refer to all extra bookings for this pricing category.
     * For example: let's say somebody booked 2 Adults + 2 Children + 3 Adult extras (for two Adults) + 2 extras for children (1 extra for each child).
     * The resulting structure will be as follows:
     *   - Adult#1 booking
     *     - Adult extra#1
     *     - Adult extra#2
     *     - Adult extra#3
     *   - Adult#2 booking
     *     - [no extras]
     *   - Child#1 booking
     *     - Child extra #1
     *     - Child extra #2
     *   - Child#2 booking
     *     - [no extras]
     * This is because it is not possible to determine which extra (and how many) goes to which pricing category
     * b) If extra is booked per booking: all extraBookings will be attached to one of pricing categories (without guarantees which in particular).
     * For example: let's say somebody booked 1 Adult + 2 Children + 3 extras.
     * The resulting structure will be as follows:
     *   - Adult booking
     *     - per booking extra#1
     *     - per booking extra#1
     *     - per booking extra#1
     *   - Child#1 booking
     *     - [no extras]
     *   - Child#2 booking
     *     - [no extras]
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBookings = 4;</code>
     */
    public Builder setExtraBookings(
        int index, io.bokun.inventory.common.api.grpc.ExtraBooking value) {
      copyOnWrite();
      instance.setExtraBookings(index, value);
      return this;
    }
    /**
     * <pre>
     * What extras (if any) had been booked by this particular pricing category?
     * a) If extra is booked per person, one of the passengers will refer to all extra bookings for this pricing category.
     * For example: let's say somebody booked 2 Adults + 2 Children + 3 Adult extras (for two Adults) + 2 extras for children (1 extra for each child).
     * The resulting structure will be as follows:
     *   - Adult#1 booking
     *     - Adult extra#1
     *     - Adult extra#2
     *     - Adult extra#3
     *   - Adult#2 booking
     *     - [no extras]
     *   - Child#1 booking
     *     - Child extra #1
     *     - Child extra #2
     *   - Child#2 booking
     *     - [no extras]
     * This is because it is not possible to determine which extra (and how many) goes to which pricing category
     * b) If extra is booked per booking: all extraBookings will be attached to one of pricing categories (without guarantees which in particular).
     * For example: let's say somebody booked 1 Adult + 2 Children + 3 extras.
     * The resulting structure will be as follows:
     *   - Adult booking
     *     - per booking extra#1
     *     - per booking extra#1
     *     - per booking extra#1
     *   - Child#1 booking
     *     - [no extras]
     *   - Child#2 booking
     *     - [no extras]
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBookings = 4;</code>
     */
    public Builder setExtraBookings(
        int index, io.bokun.inventory.common.api.grpc.ExtraBooking.Builder builderForValue) {
      copyOnWrite();
      instance.setExtraBookings(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * What extras (if any) had been booked by this particular pricing category?
     * a) If extra is booked per person, one of the passengers will refer to all extra bookings for this pricing category.
     * For example: let's say somebody booked 2 Adults + 2 Children + 3 Adult extras (for two Adults) + 2 extras for children (1 extra for each child).
     * The resulting structure will be as follows:
     *   - Adult#1 booking
     *     - Adult extra#1
     *     - Adult extra#2
     *     - Adult extra#3
     *   - Adult#2 booking
     *     - [no extras]
     *   - Child#1 booking
     *     - Child extra #1
     *     - Child extra #2
     *   - Child#2 booking
     *     - [no extras]
     * This is because it is not possible to determine which extra (and how many) goes to which pricing category
     * b) If extra is booked per booking: all extraBookings will be attached to one of pricing categories (without guarantees which in particular).
     * For example: let's say somebody booked 1 Adult + 2 Children + 3 extras.
     * The resulting structure will be as follows:
     *   - Adult booking
     *     - per booking extra#1
     *     - per booking extra#1
     *     - per booking extra#1
     *   - Child#1 booking
     *     - [no extras]
     *   - Child#2 booking
     *     - [no extras]
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBookings = 4;</code>
     */
    public Builder addExtraBookings(io.bokun.inventory.common.api.grpc.ExtraBooking value) {
      copyOnWrite();
      instance.addExtraBookings(value);
      return this;
    }
    /**
     * <pre>
     * What extras (if any) had been booked by this particular pricing category?
     * a) If extra is booked per person, one of the passengers will refer to all extra bookings for this pricing category.
     * For example: let's say somebody booked 2 Adults + 2 Children + 3 Adult extras (for two Adults) + 2 extras for children (1 extra for each child).
     * The resulting structure will be as follows:
     *   - Adult#1 booking
     *     - Adult extra#1
     *     - Adult extra#2
     *     - Adult extra#3
     *   - Adult#2 booking
     *     - [no extras]
     *   - Child#1 booking
     *     - Child extra #1
     *     - Child extra #2
     *   - Child#2 booking
     *     - [no extras]
     * This is because it is not possible to determine which extra (and how many) goes to which pricing category
     * b) If extra is booked per booking: all extraBookings will be attached to one of pricing categories (without guarantees which in particular).
     * For example: let's say somebody booked 1 Adult + 2 Children + 3 extras.
     * The resulting structure will be as follows:
     *   - Adult booking
     *     - per booking extra#1
     *     - per booking extra#1
     *     - per booking extra#1
     *   - Child#1 booking
     *     - [no extras]
     *   - Child#2 booking
     *     - [no extras]
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBookings = 4;</code>
     */
    public Builder addExtraBookings(
        int index, io.bokun.inventory.common.api.grpc.ExtraBooking value) {
      copyOnWrite();
      instance.addExtraBookings(index, value);
      return this;
    }
    /**
     * <pre>
     * What extras (if any) had been booked by this particular pricing category?
     * a) If extra is booked per person, one of the passengers will refer to all extra bookings for this pricing category.
     * For example: let's say somebody booked 2 Adults + 2 Children + 3 Adult extras (for two Adults) + 2 extras for children (1 extra for each child).
     * The resulting structure will be as follows:
     *   - Adult#1 booking
     *     - Adult extra#1
     *     - Adult extra#2
     *     - Adult extra#3
     *   - Adult#2 booking
     *     - [no extras]
     *   - Child#1 booking
     *     - Child extra #1
     *     - Child extra #2
     *   - Child#2 booking
     *     - [no extras]
     * This is because it is not possible to determine which extra (and how many) goes to which pricing category
     * b) If extra is booked per booking: all extraBookings will be attached to one of pricing categories (without guarantees which in particular).
     * For example: let's say somebody booked 1 Adult + 2 Children + 3 extras.
     * The resulting structure will be as follows:
     *   - Adult booking
     *     - per booking extra#1
     *     - per booking extra#1
     *     - per booking extra#1
     *   - Child#1 booking
     *     - [no extras]
     *   - Child#2 booking
     *     - [no extras]
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBookings = 4;</code>
     */
    public Builder addExtraBookings(
        io.bokun.inventory.common.api.grpc.ExtraBooking.Builder builderForValue) {
      copyOnWrite();
      instance.addExtraBookings(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * What extras (if any) had been booked by this particular pricing category?
     * a) If extra is booked per person, one of the passengers will refer to all extra bookings for this pricing category.
     * For example: let's say somebody booked 2 Adults + 2 Children + 3 Adult extras (for two Adults) + 2 extras for children (1 extra for each child).
     * The resulting structure will be as follows:
     *   - Adult#1 booking
     *     - Adult extra#1
     *     - Adult extra#2
     *     - Adult extra#3
     *   - Adult#2 booking
     *     - [no extras]
     *   - Child#1 booking
     *     - Child extra #1
     *     - Child extra #2
     *   - Child#2 booking
     *     - [no extras]
     * This is because it is not possible to determine which extra (and how many) goes to which pricing category
     * b) If extra is booked per booking: all extraBookings will be attached to one of pricing categories (without guarantees which in particular).
     * For example: let's say somebody booked 1 Adult + 2 Children + 3 extras.
     * The resulting structure will be as follows:
     *   - Adult booking
     *     - per booking extra#1
     *     - per booking extra#1
     *     - per booking extra#1
     *   - Child#1 booking
     *     - [no extras]
     *   - Child#2 booking
     *     - [no extras]
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBookings = 4;</code>
     */
    public Builder addExtraBookings(
        int index, io.bokun.inventory.common.api.grpc.ExtraBooking.Builder builderForValue) {
      copyOnWrite();
      instance.addExtraBookings(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * What extras (if any) had been booked by this particular pricing category?
     * a) If extra is booked per person, one of the passengers will refer to all extra bookings for this pricing category.
     * For example: let's say somebody booked 2 Adults + 2 Children + 3 Adult extras (for two Adults) + 2 extras for children (1 extra for each child).
     * The resulting structure will be as follows:
     *   - Adult#1 booking
     *     - Adult extra#1
     *     - Adult extra#2
     *     - Adult extra#3
     *   - Adult#2 booking
     *     - [no extras]
     *   - Child#1 booking
     *     - Child extra #1
     *     - Child extra #2
     *   - Child#2 booking
     *     - [no extras]
     * This is because it is not possible to determine which extra (and how many) goes to which pricing category
     * b) If extra is booked per booking: all extraBookings will be attached to one of pricing categories (without guarantees which in particular).
     * For example: let's say somebody booked 1 Adult + 2 Children + 3 extras.
     * The resulting structure will be as follows:
     *   - Adult booking
     *     - per booking extra#1
     *     - per booking extra#1
     *     - per booking extra#1
     *   - Child#1 booking
     *     - [no extras]
     *   - Child#2 booking
     *     - [no extras]
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBookings = 4;</code>
     */
    public Builder addAllExtraBookings(
        java.lang.Iterable<? extends io.bokun.inventory.common.api.grpc.ExtraBooking> values) {
      copyOnWrite();
      instance.addAllExtraBookings(values);
      return this;
    }
    /**
     * <pre>
     * What extras (if any) had been booked by this particular pricing category?
     * a) If extra is booked per person, one of the passengers will refer to all extra bookings for this pricing category.
     * For example: let's say somebody booked 2 Adults + 2 Children + 3 Adult extras (for two Adults) + 2 extras for children (1 extra for each child).
     * The resulting structure will be as follows:
     *   - Adult#1 booking
     *     - Adult extra#1
     *     - Adult extra#2
     *     - Adult extra#3
     *   - Adult#2 booking
     *     - [no extras]
     *   - Child#1 booking
     *     - Child extra #1
     *     - Child extra #2
     *   - Child#2 booking
     *     - [no extras]
     * This is because it is not possible to determine which extra (and how many) goes to which pricing category
     * b) If extra is booked per booking: all extraBookings will be attached to one of pricing categories (without guarantees which in particular).
     * For example: let's say somebody booked 1 Adult + 2 Children + 3 extras.
     * The resulting structure will be as follows:
     *   - Adult booking
     *     - per booking extra#1
     *     - per booking extra#1
     *     - per booking extra#1
     *   - Child#1 booking
     *     - [no extras]
     *   - Child#2 booking
     *     - [no extras]
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBookings = 4;</code>
     */
    public Builder clearExtraBookings() {
      copyOnWrite();
      instance.clearExtraBookings();
      return this;
    }
    /**
     * <pre>
     * What extras (if any) had been booked by this particular pricing category?
     * a) If extra is booked per person, one of the passengers will refer to all extra bookings for this pricing category.
     * For example: let's say somebody booked 2 Adults + 2 Children + 3 Adult extras (for two Adults) + 2 extras for children (1 extra for each child).
     * The resulting structure will be as follows:
     *   - Adult#1 booking
     *     - Adult extra#1
     *     - Adult extra#2
     *     - Adult extra#3
     *   - Adult#2 booking
     *     - [no extras]
     *   - Child#1 booking
     *     - Child extra #1
     *     - Child extra #2
     *   - Child#2 booking
     *     - [no extras]
     * This is because it is not possible to determine which extra (and how many) goes to which pricing category
     * b) If extra is booked per booking: all extraBookings will be attached to one of pricing categories (without guarantees which in particular).
     * For example: let's say somebody booked 1 Adult + 2 Children + 3 extras.
     * The resulting structure will be as follows:
     *   - Adult booking
     *     - per booking extra#1
     *     - per booking extra#1
     *     - per booking extra#1
     *   - Child#1 booking
     *     - [no extras]
     *   - Child#2 booking
     *     - [no extras]
     * </pre>
     *
     * <code>repeated .io.bokun.inventory.common.api.grpc.ExtraBooking extraBookings = 4;</code>
     */
    public Builder removeExtraBookings(int index) {
      copyOnWrite();
      instance.removeExtraBookings(index);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:io.bokun.inventory.common.api.grpc.Passenger)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new io.bokun.inventory.common.api.grpc.Passenger();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "pricingCategoryId_",
            "contact_",
            "pricePerPassenger_",
            "extraBookings_",
            io.bokun.inventory.common.api.grpc.ExtraBooking.class,
          };
          java.lang.String info =
              "\u0000\u0004\u0000\u0000\u0001\u0004\u0004\u0000\u0001\u0000\u0001\u0208\u0002\t" +
              "\u0003\t\u0004\u001b";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<io.bokun.inventory.common.api.grpc.Passenger> parser = PARSER;
        if (parser == null) {
          synchronized (io.bokun.inventory.common.api.grpc.Passenger.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<io.bokun.inventory.common.api.grpc.Passenger>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:io.bokun.inventory.common.api.grpc.Passenger)
  private static final io.bokun.inventory.common.api.grpc.Passenger DEFAULT_INSTANCE;
  static {
    Passenger defaultInstance = new Passenger();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      Passenger.class, defaultInstance);
  }

  public static io.bokun.inventory.common.api.grpc.Passenger getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<Passenger> PARSER;

  public static com.google.protobuf.Parser<Passenger> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

